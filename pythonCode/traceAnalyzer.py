#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This module reads and analyses all the traffic records generated by attackTraffic and does a mean for each paylaod and maps every payload with the computed traffic weight. The next step would be to tak ethe output of this module and use it along with the network analyser to actually infer the user input
import pyshark
import json


timingFile = open("./trafficRecords/timing1.json",'r')
networkTraceFile = open("./trafficRecords/analysis1.pcap",'r')

# Extract the content of the timing file into a variable
timingInfo = json.load(timingFile)

# Iterate over the timingInfo list to map the traffic weight to the payload
for info in timingInfo:
  for key in info:
    payload = key
    requestTime = info[key]["requestTime"]
    responseTime = info[key]["responseTime"]
    print("Key: %s, RequestTime: %s, ResponseTime: %s" % (payload, requestTime, responseTime))


# Returns the packets that have sniffed between specific times
def findRequestResponse(requestTime, responseTime, victimIP, serverIP):
  capture = pyshark.FileCapture('./trafficRecords/analysis1.pcap')
  resultingPackets = dict()
  for packet in capture:
    requestPackets = 0
    responsePackets = 0
    if packet.sniff_time.isoformat() >= requestTime and packet.sniff_time.isoformat() <= responseTime:
      try:
        src = packet.ip.src
        dst = packet.ip.dst
      except AttributeError, e:
        print("[dbBuilder.py -> findRequestResponse: ERROR]: Not a IP packet (%s)" % str(e))
        continue
      if src == victimIP and dst == serverIP: # REQUEST
        try:
          if packet.ssl.record_content_type == '23':
            requestPackets += int(packet.ssl.record_length)
        except AttributeError, e:
          print("[dbBuilder.py -> findRequestResponse: ERROR]: Request is not a TLS packet (%s)" % str(e))
          continue
      elif src == serverIP and dst == victimIP: # RESPONSE
        try:
          if packet.ssl.record_content_type == '23':
            responsePackets += int(packet.ssl.record_length)
        except AttributeError, e:
          print("[dbBuilder.py -> findRequestResponse: ERROR]: Response is not a TLS packet (%s)" % str(e))
          continue


